/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  
  app.use(bodyParser.json());


  var todo = [{
    id: '1',
    title : 'Buy Groceries',
    Description: 'Go to shop at 10am and buy the listed',
    completed: false
  },
  {
    id: '2',
    title : 'Buy Food',
    Description: 'Go to shop at 10am and buy Foods items',
    completed: false
  },
  {
    id: '3',
    title : 'Buy Essentials',
    Description: 'Go to shop at 10am and buy the essentials',
    completed: false
  }]


  app.get('/todos', (req , res) => {
    res.json(todo)
  })


  app.get('/todos/:id', (req, res) => {
    var id = req.params.id
  
      todo.forEach((item) => {
        if(id == item.id){
          res.json(item)
        }
      })

      
    }
  )


  app.post('/todos', (req, res) => {
    var newtodo = {
      id: Math.floor(Math.random() * 1000),
      title: req.body.title,
      Description: req.body.Description,
      completed: req.body.completed
    }

    todo.push(newtodo)
    res.send('Added to ToDo List')

  })


  app.delete('/todos/:id', (req, res) => {
    var deleteId = todo.findIndex((item) => {
      item.id == req.params.id
    })

    todo.splice(deleteId, 1)

    res.json(todo)
  })

  // app.put('/todos/:id', (req, res) => {
  //   const putId = todo.findIndex((item) => {
  //     item.id == req.params.id
  //   })

  //   todo[putId].title = req.body.title
  //   todo[putId].Description = req.body.Description
  //   res.json(todo[putId])
  // })

  app.listen(2000)
  
  module.exports = app;